replace 'async' with 'p-queue'

are the default values clear in option bags in constructors? what does intellisense offer when calling a constructor?

turn .nycrc.json all back to true

integration test ideas:
  - written with steno
  - show use of proxy agent


-- pull out migration guide content for WebClient
-- implement TLS options in WebClient and RTMClient
-- finish missing features in RTMClient: substate events, message subtype events
-- look into docs generation script
-- remove TODO and SEMVER comments from RTMClient
-- rewrite README, docs examples and /examples directory
-- add event lifecycle to guide
-- export .d.ts file
-- figure out the test script
-- write IncomingWebhook, fix its exports, write its docs

write release notes, update migration guide

add info about retryPolicies into migration guide
add Constants section to migration guide
finish writing the argument types for Web API methods

write RTMClient tests (maybe KeepAlive, logger, IncomingWebhook too)
restructure event types and enums
improve interfaces in RTMClient and WebClient
hosting the v3 docs in a sub-path

GitHub Issues to make
  * Improve documentation output
    -  emit all Web API methods
    -  emit enums LogLevel and ErrorCode
    -  emit interfaces CodedError, LoggingFunc, RetryOptions, etc.
    -  emit top-level functions addAppMetadata
    -  what happened to retryPolicies?
  * New documentation generation process
    -  search, web api methods
  * ts2jsdoc feature request: handle @event
  * WebClient config to turn rate limit management off, or give it a separate retry policy
    -  event emitted should contain the response with the retry-after headers
    -  an example of implementing your own rate-limit handling (why would you do so?)
  * RTMClient rate limit handling
  * complete the WebAPI method argument interfaces (`help wanted`)

NEW - client is initialized but has no connection

CONNECTING - user has called start()
  AUTHENTICATING
  AUTHENTICATED / WS_OPENING - start data is availalbe for the user
  WS_OPENED

CONNECTED - server has acknowledged connection with hello message, user may send messages. aka RTM_CONNECTION_OPENED
  RECONNECTING - messages can still be sent but will be queued until the websocket is open again


const rtm = new RTMClient(token);
rtm.start();
rtm.sendMessage('hello world').then(console.log).catch(console.error);

const rtm = new RTMClient(token);
rtm.on('open', () => {
  rtm.sendMessage('hello world').then(console.log).catch(console.error);
});
rtm.start();


generating documentation:
1. use the ts2jsdoc converter to generate a JSDoc interface that is semi-close, hand edit it, commit it to the repo.
   then use the old pipeline for converting JSDoc comments into markdown, and then into the jekyll site build.
   - biggest issue seems to be the WebAPI methods are not understood by the generator at all
2. ESDoc with typescript plugin and markdown export plugin
   - doesn't understand overloaded function/method definitions.
   - other hard to decipher errors
   - project maintainer seems unresponsive
3. typedoc
   - completely different output than i'd expect
   - uses JavaDoc syntax?
